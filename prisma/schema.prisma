// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Users {
    user_id       		Int       		@id @default(autoincrement())
    username      		String    		@unique @db.VarChar(25)
    email         		String    		@unique @db.VarChar(255)
    fullname      		String    		@unique @db.VarChar(50)
    password      		String    		@db.VarChar(255)
    profile_image 		String    		@db.Text
    created_at    		DateTime  		@default(now())
    recipes       		Recipe[]
    comments      		Comment[]
    ratings       		Rating[]
}

model Recipe {
    recipe_id         	Int             @id @default(autoincrement())
    user_id           	Int
    title             	String          @db.Text
    description       	String?         @db.Text
    image_url         	String?         @db.Text
    prep_time_minutes 	Int?
    cook_time_minutes 	Int?
    servings          	Int?
    average_rating    	Decimal         @default(0.00) @db.Decimal(3, 2)
    created_at        	DateTime        @default(now())
    user              	Users           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
    recipeIngredients 	RecipeIngredient[]
    instructions      	Instruction[]
    comments          	Comment[]
    ratings           	Rating[]
}

model Ingredient {
    ingredient_id   	Int             @id @default(autoincrement())
    ingredient_name 	String          @unique @db.VarChar(100)
    category        	String?         @db.Text
    recipes         	RecipeIngredient[]
}

model RecipeIngredient {
    recipe_ingredient_id Int        @id @default(autoincrement())
    recipe_id            Int        @unique
    ingredient_id        Int        @unique
    quantity             String     @db.Text
    unit                 String?    @db.Text
    recipe               Recipe     @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)
    ingredient           Ingredient @relation(fields: [ingredient_id], references: [ingredient_id], onDelete: Cascade)
}

model Instruction {
    instruction_id Int    @id @default(autoincrement())
    recipe_id      Int
    step_number    Int
    step_text      String @db.Text
    recipe         Recipe @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)
}

model Comment {
    comment_id   Int      @id @default(autoincrement())
    user_id      Int
    recipe_id    Int
    comment_text String   @db.Text
    created_at   DateTime @default(now())
    user         Users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
    recipe       Recipe   @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)
}

model Rating {
    rating_id  Int      @id @default(autoincrement())
    user_id    Int      @unique
    recipe_id  Int      @unique
    rating     Int
    created_at DateTime @default(now())
    user       Users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
    recipe     Recipe   @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)
}
