generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum FoodCategories {
    breakfast
    lunch
    dinner
    dessert
    appetizer
    snack
    soup
    beverage
    salad
    side_dish
}

enum NotificationType {
    like
    comment
    bookmark
}

enum TimeUnit {
    minutes
    hours
    days
}

model Users {
    user_id       		Int       		@id @default(autoincrement())
    username      		String    		@unique @db.VarChar(25)
    email         		String    		@unique @db.VarChar(255)
    fullname      		String    		@unique @db.VarChar(50)
    password      		String    		@db.VarChar(255)
    profile_image 		String    		@db.Text
    cover_photo         String?         @db.Text
    bio                 String?         @db.Text
    social_links        Json?
    gender              String?         @db.VarChar(20)
    pronouns            String?         @db.VarChar(50)
    created_at    		DateTime  		@default(now())
    recipes       		Recipe[]
    comments      		Comment[]
    bookmarks     		Bookmark[]
    userLikes           UserLike[]
    commentLikes        CommentLike[]

    sentNotifications       Notification[]      @relation("NotificationSender")
    receivedNotifications   Notification[]      @relation("NotificationRecipient")
}

model UserLike {
    user_like_id        Int             @id @default(autoincrement())
    user_id             Int
    recipe_id           Int
    created_at          DateTime        @default(now())
    user                Users           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
    recipe              Recipe          @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)

    @@unique([user_id, recipe_id])
    @@index([user_id])
    @@index([recipe_id])
}

model Recipe {
    recipe_id         	Int             @id @default(autoincrement())
    user_id           	Int
    title             	String          @db.Text
    description       	String?         @db.Text
    image_url         	String?         @db.Text
    prep_time_value 	Int?
    prep_time_unit      TimeUnit?
    cook_time_value 	Int?
    cook_time_unit      TimeUnit?
    servings          	Int?
    category        	FoodCategories?
    average_rating    	Decimal         @default(0.00) @db.Decimal(3, 2)
    created_at        	DateTime        @default(now())
    user              	Users           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
    recipeIngredients 	RecipeIngredient[]
    instructions      	Instruction[]
    likes             	Int             @default(0)
    comments          	Comment[]
    bookmarks           Bookmark[]
    userLikes           UserLike[]
    notifications       Notification[]
}

model Ingredient {
    ingredient_id   	Int             @id @default(autoincrement())
    ingredient_name 	String          @unique @db.VarChar(100)
    recipes         	RecipeIngredient[]
}

model RecipeIngredient {
    recipe_ingredient_id Int        @id @default(autoincrement())
    recipe_id            Int        
    ingredient_id        Int        
    quantity             Decimal?   @db.Decimal(10, 2)
    unit                 String?    @db.Text
    recipe               Recipe     @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)
    ingredient           Ingredient @relation(fields: [ingredient_id], references: [ingredient_id], onDelete: Cascade)

    @@unique([recipe_id, ingredient_id])
    @@index([recipe_id])
    @@index([ingredient_id])
}

model Instruction {
    instruction_id Int    @id @default(autoincrement())
    recipe_id      Int
    step_number    Int
    step_text      String @db.Text
    recipe         Recipe @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)

    @@index([recipe_id, step_number])
}

model Comment {
    comment_id          Int             @id @default(autoincrement())
    user_id             Int
    recipe_id           Int
    parent_comment_id   Int?
    comment_text        String          @db.Text
    comment_likes       Int             @default(0)
    created_at          DateTime        @default(now())
    
    user                Users           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
    recipe              Recipe          @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)

    parent_comment      Comment?        @relation("CommentReplies", fields: [parent_comment_id], references: [comment_id], onDelete: Cascade)
    replies             Comment[]       @relation("CommentReplies")

    likes               CommentLike[]

    @@index([recipe_id])
    @@index([user_id])
    @@index([parent_comment_id])
    @@index([created_at])
}

model CommentLike {
    comment_like_id     Int             @id @default(autoincrement())
    user_id             Int
    comment_id          Int
    created_at          DateTime        @default(now())
    
    // Relations
    user                Users           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
    comment             Comment         @relation(fields: [comment_id], references: [comment_id], onDelete: Cascade)

    @@unique([user_id, comment_id])
    @@index([user_id])
    @@index([comment_id])
}

model Bookmark {
    bookmark_id         Int             @id @default(autoincrement())
    user_id             Int
    recipe_id           Int
    created_at          DateTime        @default(now())
    user                Users           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
    recipe              Recipe          @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)

    @@unique([user_id, recipe_id])
    @@index([user_id])
    @@index([recipe_id])
}

model Notification {
    notification_id     Int                 @id @default(autoincrement())
    recipient_id        Int
    sender_id           Int 
    recipe_id           Int?
    type                NotificationType
    message             String              @db.Text
    is_read             Boolean             @default(false)
    created_at          DateTime            @default(now())
    
    // Relations
    recipient           Users               @relation("NotificationRecipient", fields: [recipient_id], references: [user_id], onDelete: Cascade)
    sender              Users               @relation("NotificationSender", fields: [sender_id], references: [user_id], onDelete: Cascade)
    recipe              Recipe?             @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)
    
    @@index([recipient_id])
    @@index([sender_id])
    @@index([recipe_id])
    @@index([created_at])
}